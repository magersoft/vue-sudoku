{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?4241","webpack:///./src/App.vue?c2c2","webpack:///./src/components/Sudoku.vue?717d","webpack:///./src/utils/boards.js","webpack:///./src/utils/helpers.js","webpack:///./src/utils/solved.js","webpack:///src/components/Sudoku.vue","webpack:///./src/components/Sudoku.vue?0b57","webpack:///./src/components/Sudoku.vue","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue","webpack:///./src/main.js","webpack:///./src/components/Sudoku.vue?d886"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","app","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default","Appvue_type_template_id_d35646aa_render","_vm","this","_h","$createElement","_c","_self","attrs","id","staticClass","alt","width","src","_v","staticRenderFns","Sudokuvue_type_template_id_ba3d5322_scoped_true_render","_l","row","rowIndex","class","col","colIndex","invalid","type","data-row","data-column","readonly","disabled","domProps","on","click","columnTarget","keyup","columnEnter","align-h","variant","buildBoard","solve","Sudokuvue_type_template_id_ba3d5322_scoped_true_staticRenderFns","generatedNumbers","randomInterval","min","max","Math","floor","random","getRandomBoard","array","getChunks","lenght","chunks","Solved","board","solved","steps","digits","numberSquares","unknown","init","column","changed","update","isSolved","isFailed","backtracking","solveMethodSingle","arrayDiff","rowContent","colContent","blockContent","markSolved","solveMethodHiddenSingle","lessSuggest","lessRowSuggest","lessColSuggest","lessBlockSuggest","different","array1","array2","found","k","content","offset","blockOffset","inValue","minRow","minCol","suggestContent","sudoku","outValue","Sudokuvue_type_script_lang_js_","gameLength","mounted","methods","parseInt","validate","_this","allValid","numbers","validator","_column","_array","_row","event","target","readOnly","blur","select","element","test","dataset","_this2","map","e","alert","_loop","columns","_loop2","index","components_Sudokuvue_type_script_lang_js_","component","componentNormalizer","Sudoku","Appvue_type_script_lang_js_","components","src_Appvue_type_script_lang_js_","App_component","App","Vue","config","productionTip","use","BootstrapVue","render","h","$mount","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Sudoku_vue_vue_type_style_index_0_id_ba3d5322_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Sudoku_vue_vue_type_style_index_0_id_ba3d5322_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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ACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,qFAGEC,EAAiB,SAACC,EAAKC,GAAN,OAAcC,KAAKC,MA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","file":"js/app.9af7e00f.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('div',{staticClass:\"container\"},[_c('img',{attrs:{\"alt\":\"img algo\",\"width\":\"200\",\"src\":\"https://vuejs.org/images/logo.png\"}}),_c('h1',[_vm._v(\"Sudoku.js Vue\")]),_c('sudoku')],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',{staticClass:\"main\"},[_c('table',{staticClass:\"board\"},[_c('tbody',{staticClass:\"board__body\"},_vm._l((_vm.sudoku),function(row,rowIndex){return _c('tr',{key:rowIndex,staticClass:\"row row__border\",class:(rowIndex % 3 === 2 && rowIndex !== 8) ? 'row__border--bottom' : ''},_vm._l((row),function(col,colIndex){return _c('td',{key:colIndex,staticClass:\"column column__border\",class:[\n                    (colIndex % 3 === 2 && colIndex !== 8) ? 'column__border--right' : '',\n                    col.invalid ? 'invalid' : 'valid'\n                ]},[_c('input',{attrs:{\"type\":\"tel\",\"data-row\":rowIndex,\"data-column\":colIndex,\"readonly\":!col.disabled},domProps:{\"value\":col.value},on:{\"click\":_vm.columnTarget,\"keyup\":_vm.columnEnter}})])}),0)}),0)]),_c('br'),_c('b-row',{attrs:{\"align-h\":\"between\"}},[_c('b-col',[_c('b-button',{attrs:{\"variant\":\"outline-primary\"},on:{\"click\":_vm.buildBoard}},[_vm._v(\"Build New Board\")])],1),_c('b-col',[_c('b-button',{attrs:{\"variant\":\"success\"},on:{\"click\":_vm.solve}},[_vm._v(\"Solved\")])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","const generatedNumbers = [\r\n    '016002400320009000040103000005000069009050300630000800000306010000400072004900680',\r\n    '017030590000000403000006070120009050000402000060700021030600000901000000054020310',\r\n    '018093005002710000046000000000000079100904002250000000000000920000032500600850140',\r\n    '018700059700000000405800030607900000000050000000007106050001904000000003830002560',\r\n    '019000000002390010357200000000002930200000008091600000000008293080024600000000850',\r\n    '020056000000009018500000200000780059005000800270045000006000004430600000000570090',\r\n    '020080004800140020059200300760000000000907000000000056002004910040031007600090030',\r\n    '020089107001002300950000600400900000000010000000004003009000012002400500103520080',\r\n    '020090407700302500000000006359000000040020060000000745900000000004601003806030070',\r\n    '020100004010024090900300260402030000000205000000070509041007003080510070700002080',\r\n    '020103000000006190000002704800000070530000016090000003403600000018300000000509080',\r\n    '020300000090000580703000000100508020200090008050703009000000801081000030000009060',\r\n    '020307000900000170701604005310500000200000006000002017800709400079000008000106030',\r\n    '023100900100000080700059013071003400300000008002400370910520007030000004007001290',\r\n    '024010090010000300003648000000780000270030041000029000000851700009000050080090410',\r\n    '025000070000000901600410200000069000009104500000370000004053009206000000050000480',\r\n    '025607100000005900700030000001200080090000010050009200000060002004900000008503670',\r\n    '027900010000070000000000026308517000006040800000863405280000000000050000010004380',\r\n    '028003140700000000014000005031264000000000000000978430100000290000000007049600350',\r\n    '029004700580001000070056900000000007712000698400000000001620030000900046008500170',\r\n    '030000000005010203060930400000100630306050108024003000009042060602080700000000080',\r\n    '030000046200000075000400300053090000406805709000070150009006000640000008170000030',\r\n    '030002900500000000000004378800230090600040003070089001325600000000000007007900060',\r\n    '030020050600004002005000004083007900000851000001900840400000600100700008050010090',\r\n    '030060824860014000900300000000049750000000000076250000000002007000470085795030040',\r\n    '030504790756010000000000003470000000003060200000000071300000000000050824018709030',\r\n    '030700920801050007000000085050200000070401060000005070510000000200080409089007010',\r\n    '030897500005040100000001006000000279800000001719000000500600000001030900003189060',\r\n    '031450000640000000005002001000001950500947003019300000300100500000000024000084730',\r\n    '035290000000800350010030000009600830400050007082001900000060020021009000000025640',\r\n    '036059000000000900009010076000007080907000104050800000460030500002000000000720840',\r\n    '036090001800000000021003807058700000000935000000008650107200360000000009500080720',\r\n    '040000000002800003001376020007008106409060208506900700060291300200004900000000040',\r\n    '040000000100052600900403070000001039800020005390800000050208006008530002000000010',\r\n    '040000103000300080000028500005004200210807096003200700009170000020003000506000070',\r\n    '040001009000000054509400002102070000000803000000040207200006803360000000800500060',\r\n    '040002510002056003907000000000000097003040200120000000000000301400860700091500080',\r\n    '040006000000002040098045000034000058600000004870000620000130560080700000000200070',\r\n    '040020000018005000070308400450000000000276000000000068005702010000400790000010050',\r\n    '040100005000080000280306000028030079300000006760050430000507092000090000500003010',\r\n    '040507000000000091009003480003040002001609300400010700037900800680000000000804030',\r\n    '040690000000000000387001600500020470001040300064080005008400291000000000000068030',\r\n    '040800300000004200067209140000000801080070050601000000073601490005700000006008010',\r\n    '040900000002630507690000008000120000700000001000095000400000023506042100000001070',\r\n    '040950160000000000000632900567200000090000070000005698002569000000000000086074050',\r\n    '041000000008006740306000000070095010803167402010320070000000804035200900000000230',\r\n    '041059000600000000800360000200004053006935200750200001000048007000000006000620410',\r\n    '042000000900354000000000050706830000030040020000019807050000000000728009000000270',\r\n    '042003950000000070000000301470300500050906010006001034708000000060000000035600290',\r\n    '042600000600090030009100080060001000007000500000200070010003400090050006000008920',\r\n    '047000061800200000006703800000060180600070009019050000003609500000005003480000690',\r\n    '047200609008970040000000000005000030314060597090000200000000000080056300201008960',\r\n    '048039000025000040900000003060001000002853100000600050600000001080000730000410520',\r\n    '048390010000008000000001520009080006000905000800030900032400000000200000050073460',\r\n    '048602050000000000005070832000000014437000528680000000872010900000000000010908370',\r\n    '048690200701002000000000049000080320100000005056030000820000000000100508004058670',\r\n    '048700050000300000000080609060007034080124060420600080803010000000008000090006720',\r\n    '049000080000671000000900002500410200092000740007095003800004000000759000010000570',\r\n    '050000000102400050630580000095000068400030001820000430000052017010009305000000090',\r\n    '050000004230004600006000035500800700090010080008009002670000200001600058800000070',\r\n    '050000080920750160000000790400270801000000000305089007069000000032065078040000030',\r\n    '050000300900070084001800200185207000000060000000409138007002800690080002002000060',\r\n    '050007906087003000000002000500190007740000095900078003000300000000800610801700040',\r\n    '050008000691500008000000625780960000000000000000072094439000000500004937000300060',\r\n    '050009487300000000080270300006000035100806002520000600005068040000000003693400070',\r\n    '050013080400500006308000004210070000000000000000020093500000307700008001020750040',\r\n    '050020004007580920400006000000000493060000050328000000000700006013042500500090010',\r\n    '050040000900000032308005060000200008070304010600001000090700406580000003000050090',\r\n    '050300800000409356000750009006000007000000000300000600700082000639504000005007010',\r\n    '050400000000080659010306000627000000300000005000000294000209070275010000000007020',\r\n    '050409760210003000004020000001005040005000600060800100000030800000200071097501020',\r\n    '050430000479802600000000000003074200047000530001350700000000000005607912000029070',\r\n    '050600741060000000308200000004300000630907082000005900000003504000000060481002070',\r\n    '050800100000019600000000240685000000007308900000000862063000000008720000009001030',\r\n    '051037000000010009706008100695400000000000000000005694008300701300050000000170530',\r\n    '051080006006350400000006020810000200000508000004000057040100000007039500500040680',\r\n    '052071003007500082060000000000004090004000500010300000000000060520007100900610870',\r\n    '053106000680000000200000065004280016000060000720031900410000003000000024000902680',\r\n    '056003700000006500000000029004070000729000135000050400810000000005400000003900210',\r\n    '056070000900002000078564030420008050000000000080700042030486710000300008000090420',\r\n    '057000002000050180000301700029106000000070000000504910004805000086010000500000630',\r\n    '057420000630005000089310000000000400300748005004000000000067130000200094000034260',\r\n    '058040030000087205300000087009006000000030000000400700210000003803210000040050920',\r\n    '058300000000194700000006920490000017000000000830000054082900000003718000000002470',\r\n    '058900060100007090203050108900000000006000800000000005309080406010600002040009380',\r\n    '060000000000250060108000207009500070040793010080006500602000701090075000000000040',\r\n    '060000000001009020000007143000250096036000210490068000843700000020800700000000030',\r\n    '060000000004050068008930004050000630010040020026000040900085200640070900000000070',\r\n    '060000000005026400020000098240093860000040000053860042370000050001570300000000070',\r\n    '060000200070000386304068005000037000080090070000580000100850407258000090006000020',\r\n    '060000504009100000014500790600002000000873000000900003097008640000004900103000080',\r\n    '060040820500000000020008001070100004046203750900005060200800010000000008091060040',\r\n    '060100000703000510108200000070040008901683402600020090000006801046000905000002040',\r\n    '060180004400700020005300080300000700000060000001000003040009500080005002900031040',\r\n    '060407810500002000000000923071000059000000000690000240136000000000200004027501080',\r\n    '060510208000006039002000000000000014080401090450000000000000500270800000503079080',\r\n    '060829000040060030007000080700030500001905600006070009070000100020010090000293040',\r\n    '060830002030020000000000100620078001000514000400260053002000000000040090700085060',\r\n    '061000000054082000830000000070400002205306907600005040000000095000260810000000260',\r\n    '062300700004060900900000000308000062500020004290000103000000007001080600005009340',\r\n    '062900010038452090500060000000000051200506004350000000000070008080295170070008520',\r\n    '064002300003710000700003000340009007500000006900800043000900008000025700005400920',\r\n    '068039000900060018100000000000500702810000064203004000000000006350020001000340820',\r\n    '068120000007004000900800000070003200403080105006400080000009001000300400000061920',\r\n    '069000000308500900200009000080390001006040700900027080000100004007006502000000160',\r\n    '069030000000165900700000000096051030003649200040370590000000001007528000000010780',\r\n    '069400000725030049403000000000006090030010020050900000000000406890040235000008910',\r\n    '070000080005018006000000251200805600050060040003902007768000000500180400010000060',\r\n    '070000300000347509800000000009604018000020000680103900000000003901482000006000020',\r\n    '070009005000001000123008070600000100002486700007000002080300921000800000200100050',\r\n    '070010209009480000006300007930000000004030800000000054600003400000062100802050060',\r\n    '070018000000002807003500000240900070001287300030005062000009600609800000000430080',\r\n    '070020900000007104000051060620008400000060000008500026090170000201300000004080030',\r\n    '070400000290001400000900002006003009400789001500600300100005000005100063000008010',\r\n    '070400003090100000003605008000000304084000720306000000200509400000003010100002090',\r\n    '070500018000000004453700600000200060009604200060007000005009142100000000620001080',\r\n    '070900004002000000050087060003000245800010007624000900060230010000000500200006090',\r\n    '071439000000000000603075200000000061010596070540000000002960704000000000000742610',\r\n    '071605830006090007020000004000570000008000200000064000500000010800050700063701540',\r\n    '072003900430000000090470000005020000003849700000060400000032040000000092006100570',\r\n    '072610000080300007100070006050000140620000078014000060400060003200008050000053420',\r\n    '073900000012000000004850000009270000760493081000065900000089300000000470000007520',\r\n    '076080000800000200091027000400002005050030060100400007000840730003000001000060890',\r\n    '076180020200000507000007100800005000092000610000900008005800000904000006020054370',\r\n    '076308090000001002004007030460200900000000000008006014030800100200100000080702640',\r\n    '076430005300072086000000000010300200080060030002008060000000000960710002200083510',\r\n    '079540000600000190000036800006073500300000007007460900002650000091000003000019450',\r\n    '080000000000609502024300000000706210070090030039204000000003170103907000000000040',\r\n    '080000000000946007060307000570000009804503702600000015000801030100469000000000050',\r\n    '080000030020017000400235910600003000290040056000500001034652009000370040070000020',\r\n    '080006300570090000201804907620000000000080000000000038809207106000060079005900020',\r\n    '080030000004000120902600000020308000370000058000702060000009607016000400000080010',\r\n    '080030057000564000000000200050000049004873600860000030003000000000928000790050020',\r\n    '080030407200074180001000000060089000000000000000120070000000600025390008706010020',\r\n    '080200530069050000001048000000000670200000009048000000000410900000070120097005060',\r\n    '080409030032000080600800000000000063006758100970000000000001004050000670010604050',\r\n    '080750340700009600000000007001080093970000026240090100300000000002300008064015030',\r\n    '081007040000000060907500000005004608000706000702800900000003402030000000070400530',\r\n    '083001209910008070500009000008000060000050000070000900000800006040600013109300840',\r\n    '084060009000000300000037016150000003008106500400000061210580000003000000500010230',\r\n    '084500000001002650000060090000000567060401030235000000050080000017900300000007420',\r\n    '086000094400090000000000508090038100070609030001740050703000000000070005910000240',\r\n    '087000069000070000000104700030208057700030001960701030001803000000090000590000370',\r\n    '089000000000065000047900621065001000000609000000300850231008560000520000000000940',\r\n    '089571400000000000073004020000006005305000802800900000010400360000000000006753980',\r\n    '089700100010000000460200000530120000800050002000067095000008064000000070004001230',\r\n    '090000000040300000080690257006070100210080075008030900853027090000003020000000080',\r\n    '090000000740005000000871050500302079800000005930506001080713000000600087000000060',\r\n    '090000146170000000050400020000024300002080900007590000080006010000000038526000070',\r\n    '090000726300050400600009100000680000000705000000012000009100007002090003748000060',\r\n    '090006370000817500050000000041608093000000000380704610000000050002975000065100030',\r\n    '090028003000007400030100000000000280658000739017000000000006050009300000300750040',\r\n    '090046500800019630000800000000100790100000005029004000000001000051490002002530010',\r\n    '090050800382010000401000000024038100030090020009640580000000908000060475005070060',\r\n    '090082100782600400000000006000000365049203780863000000400000000008009674005340010',\r\n    '090176000000400900000020074520610400800000002006058037150060000002003000000791060',\r\n    '090200100056400038000006007361000000000000000000000743200900000410003670007005090',\r\n    '090250400301060000000001590000000803000579000605000000089600000000090305003048070',\r\n    '090300100000750608004100000000000720400000001058000000000006400802094000009003050',\r\n    '091007000000060800030205060573000900000000000006000327040501080009070000000300570',\r\n    '092000003570800000000200040010080400208904701005010020060001000000008092700000650',\r\n    '092450300008020107000100000264000000000070000000000568000008000905060400003019850',\r\n    '093050000000407801408600050200070000800105006000020005040009602902704000000060790',\r\n    '096040000000803000000100423503000000089000510000000604872001000000308000000090860',\r\n    '096150803800004005014000000000000002005783400700000000000000760100600004607042580',\r\n    '097000000000000630000052810380009000060030080000600041024960000018000000000000270',\r\n    '097000230000740081010030000009000504000090000205000100000010040620059000051000390',\r\n    '097028000000000060000500210003006490050943080019800700035007000080000000000430820',\r\n    '098003000003004000010502060000038002800000005300650000070406080000300100000100290',\r\n    '100000000000014275000930000005000009039157420700000800000041000968520000000000003',\r\n    '100000000020013950080069007090500000037000620000006090600970080015320060000000009',\r\n    '100000000070000800000850069700003980000469000032100004620017000009000030000000006',\r\n    '100000040740003001800007602000004380000789000028300000203900004600200018010000003',\r\n    '100000048000910000760200000000060427003000500874090000000005091000031000430000005',\r\n    '100000070574100000008005400700030100940502037006010002003800700000009361050000008',\r\n    '100000095096300704000000000010062000802000307000480010000000000704005620980000001',\r\n    '100000400000200056206700000000120800020080070009057000000006708430008000005000003',\r\n    '100000500007240003806950014700530000000000000000026005650078401900015800001000007',\r\n    '100000860000000070000632015790800040030040080020001053970316000010000000085000001',\r\n    '100003700020008000007090624002700006050109070700004900275080100000900040001300002',\r\n    '100004950000000000020509610030600000000475000000003080051806090000000000064900007',\r\n    '100005869000300000005010320000000008480609072300000000023080900000007000869400001',\r\n    '100030000090010827005000000000003005703020409200400000000000500821090070000060003',\r\n    '100030209008005000409000000600078300307000506002650004000000802000200100901080003',\r\n    '100060000030470000040008306405007000670000085000600401703500040000046050000090003',\r\n    '100060200096720000430500000001905006000000000200106400000001064000058790004090002',\r\n    '100078000000000502093100000000000320306000907082000000000005490201000000000630008',\r\n    '100083906082090040000000000000001003940368052300900000000000000090050260401270005',\r\n    '100085000004000080302400000007000160010529030035000200000002504020000700000190006',\r\n    '100090007080600000000400698060000305050000040307000060294005000000003080500040006',\r\n    '100204800030800170400000009900007000000631000000400008600000007041008050005306002',\r\n    '100208070048930060790000000900000000005020800000000007000000016080075420020406005',\r\n    '100300070000000000500070389012004000860050024000800730485020007000000000020009005',\r\n    '100400009004050600000260004200600010900000007030007002500043000003070100400002003',\r\n    '100508047004070000000004000702800604300090005609002308000400000000020100870109003',\r\n    '100603200000000680009200500030000006200080001800000040002005900095000000006307002',\r\n    '100800000000010030850000900007036009082070450600480100004000087030090000000003001',\r\n    '100800000007930100020071800090067008700389002800420070008250090006093400000008003',\r\n    '100900000004700025080000640000150003800000004600032000095000070710004500000007006',\r\n    '100900502000500030000104000010000647006807100974000050000309000060002000809006005',\r\n    '102000000000080200043500100000350004075208690800064000004005980001070000000000301',\r\n    '102000070600029000000410500000000240070506030031000000003048000000150006060000803',\r\n    '102400000070000452090000010500060200000834000009010006010000080258000070000007905',\r\n    '104000000809060000030018006040009010000603000090500080200850090000020107000000805',\r\n    '104007000800000200007500680000040006020090040700060000089002400003000009000300807',\r\n    '105000000000094020000003070840930700500000009003082045080500000060840000000000107',\r\n    '105007000000062500709005800800700040400000007070003006004500208007210000000900704',\r\n    '106000090700009360040602001000001620000040000078200000800306010053900006060000509',\r\n    '106500000000008204500007600200004080000805000040300002007900003903700000000003709',\r\n    '106902000040150800000000000001069074072000190490310200000000000004071050000503409',\r\n    '107080003405901000000000000258000000040602010000000792000000000000205609600090507',\r\n    '107500000005004378000200005032070050000000000010080420600002000974100200000006107',\r\n    '107600930000012500000900400960180000000000000000037069001006000005320000094008601',\r\n    '108400000009800010546900000900000180003000700061000009000004896090005300000007401',\r\n    '108400093000009000005230000800900000350000041000008002000017600000800000630002708',\r\n    '109006000000480000058003076602000000007010400000000209980300620000047000000200305',\r\n    '109060000340000090000000430500830000030649070000021003063000000090000025000010308',\r\n    '109300000060010000000900780090085107700000003801790020017009000000050070000004905',\r\n    '120005300006000005000072000304050009000010000200040503000860000800000400001900026',\r\n    '120008030007300500000270846003000000200000005000000700842039000009006300030100059',\r\n    '120076500400000100000540300080000000700215003000000050009084000007000004008120065',\r\n    '120560000309000400000300068406100030000000000050007601930002000002000806000045029',\r\n    '123060400007800600600090007000100000000254000000008000900010008004005700005020136',\r\n    '124000070050037000006810000000500320500000009041003000000085100000960080060000932',\r\n    '140053009005000003000900050000590810900030007028074000080009000500000200300760084',\r\n    '140703250020000000009000004080034075000601000690270030400000800000000040016405097',\r\n    '140720050000084000900103007000000600290465031007000000800309006000670000070042019',\r\n    '140839000730100000000000030015060300960000042004010690020000000000001064000623017',\r\n    '140900030502013000003600000020004007009080400400500020000001300000370506060009014',\r\n    '145006000000000000600753100006380002090000050800049300009631005000000000000900437',\r\n    '150296000000000090092430000000002034600000007920600000000024350080000000000713049',\r\n    '150700000020048006300000000004800090002401600070009300000000001600120080000007025',\r\n    '156280090000000640000000500008630009001908700300045800005000000043000000090063485',\r\n    '158006090000000001004801300860000000007080500000000012003504600900000000040200173',\r\n    '160097030040500000000300000850000100002408500006000078000006000000009040030750069',\r\n    '160270000020004901000000500000620400490000013006041000001000000608900050000017068',\r\n    '160300000004950000000014002207000090600205001050000803500140000000087100000009068',\r\n    '160720000000360000000000006078200060015000920090008430900000000000031000000087095',\r\n    '160903080200000001040000700502000040800050003030000105003000090400000008090308052',\r\n    '167009000009800050000000000002945078000010000970268300000000000080006700000500189',\r\n    '170000000008041650005030018000010095000506000510070000730060200091480500000000049',\r\n    '170000430006000790000000001200009080410278069060500002900000000083000200042000058',\r\n    '170040030006700000005008006294000000000030000000000194400900800000005200020060075',\r\n    '170200830400508017800700002000000700310000058002000000200009006040607009063001075',\r\n    '179300050080000009230400000007060000000749000000020800000007065600000090090002138',\r\n    '186000000000000003370400500700600100900253007004001008009004031600000000000000856',\r\n    '186400000700908020005000000200100000460000059000005003000000900010703002000004378',\r\n    '190000002800000000050239001907020006000304000600070803300892040000000008400000035',\r\n    '190003000506049120000000000000500940009368700062001000000000000041730805000100067',\r\n    '190053080005006009000000040001000002904070506600000100080000000200800900030910058',\r\n    '190060005476002100005009000000000081000805000680000000000700300003200794200040016',\r\n    '192000568004001000000020000403500002060000040200009106000080000000300600985000731',\r\n    '200000000700059068050008100920400000005080700000007026004600070360790001000000005',\r\n    '200000007097000041800096020005009410000317000029400700010270004970000830500000002',\r\n    '200009708700653004000070090800090030001000400070040009030080000900325001507900003',\r\n    '200030000000005723800906050000000006100809005400000000090104002746500000000060004',\r\n    '200053709030000086007902000000000091001060300370000000000309600890000010702840003',\r\n    '200401060079000000180790200004600030000010000090008400008049027000000190040107005',\r\n    '200500300050870000000006000930680420400000009025034018000300000000012090007005002',\r\n    '200710094700000800040983070450200000000000000000009023010692040006000007590037001',\r\n    '200800014700010000001095800000000790006907500072000000003620100000040006610009003',\r\n];\r\n\r\nconst randomInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\r\n\r\nconst getRandomBoard = array => array[randomInterval(0, array.length - 1)];\r\n\r\nexport {\r\n    generatedNumbers,\r\n    getRandomBoard\r\n}","const getChunks = (array, lenght) => {\r\n    let chunks = [], i = 0, n = array.length;\r\n    while (i < n) {\r\n        chunks.push(array.slice(i, i += lenght));\r\n    }\r\n    return chunks\r\n};\r\n\r\nexport {\r\n    getChunks\r\n}","export const Solved = board => {\r\n    let solved = [];\r\n    let steps = 0;\r\n\r\n    const digits = [1,2,3,4,5,6,7,8,9];\r\n    const numberSquares = 81;\r\n    const unknown = 'unknown';\r\n\r\n    init(board); solve();\r\n\r\n    function init(board) {\r\n        steps = 0;\r\n        for (let row = 0; row < 9; row++) {\r\n            solved[row] = [];\r\n            for (let column = 0; column < 9; column++) {\r\n                if (board[row][column]) {\r\n                    solved[row][column] = [board[row][column], 'in', []];\r\n                } else {\r\n                    solved[row][column] = [0, unknown, digits];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function solve() {\r\n        let changed = 0;\r\n\r\n        do {\r\n            changed = update();\r\n            steps++;\r\n            if (numberSquares < steps) {\r\n                break;\r\n            }\r\n        } while (changed);\r\n\r\n        if (!isSolved() && !isFailed()) {\r\n            backtracking();\r\n        }\r\n    }\r\n\r\n    function solveMethodSingle(row, col) {\r\n        solved[row][col][2] = arrayDiff(solved[row][col][2], rowContent(row));\r\n        solved[row][col][2] = arrayDiff(solved[row][col][2], colContent(col));\r\n        solved[row][col][2] = arrayDiff(solved[row][col][2], blockContent(row, col));\r\n\r\n        if (solved[row][col][2].length === 1) {\r\n            markSolved(row, col, solved[row][col][2][0]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function solveMethodHiddenSingle(row, col) {\r\n        let lessSuggest;\r\n        lessSuggest = lessRowSuggest(row, col);\r\n        let changed = 0;\r\n        if (lessSuggest.length === 1) {\r\n            markSolved(row, col, lessSuggest[0]);\r\n            changed++;\r\n        }\r\n        lessSuggest = lessColSuggest(row, col);\r\n        if (lessSuggest.length === 1) {\r\n            markSolved(row, col, lessSuggest[0]);\r\n            changed++;\r\n        }\r\n        lessSuggest = lessBlockSuggest(row, col);\r\n        if (lessSuggest.length === 1) {\r\n            markSolved(row, col, lessSuggest[0]);\r\n            changed++;\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    function update() {\r\n        let changed = 0;\r\n\r\n        let different = arrayDiff(solved[1][3][2], rowContent(1));\r\n        different = arrayDiff(different, colContent(3));\r\n        different = arrayDiff(different, blockContent(1, 3));\r\n        different;\r\n\r\n        for (let row = 0; row < 9; row++) {\r\n            for (let col = 0; col < 9; col++) {\r\n                if (unknown !== solved[row][col][1]) {\r\n                    continue;\r\n                }\r\n\r\n                changed += solveMethodSingle(row, col);\r\n\r\n                changed += solveMethodHiddenSingle(row, col);\r\n            }\r\n        }\r\n\r\n        return changed;\r\n    }\r\n\r\n    function markSolved(row, col, solve) {\r\n        solved[row][col][0] = solve;\r\n        solved[row][col][1] = 'solved';\r\n    }\r\n\r\n    function arrayDiff(array1, array2) {\r\n        let arrayDiff = [];\r\n        for (let i = 0; i < array1.length; i++) {\r\n            let found = false;\r\n            for (let k = 0; k < array2.length; k++) {\r\n                if (array1[i] === array2[k]) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                arrayDiff[arrayDiff.length] = array1[i];\r\n            }\r\n        }\r\n        return arrayDiff;\r\n    }\r\n\r\n    function rowContent(row) {\r\n        let content = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (unknown !== solved[row][i][1]) {\r\n                content[content.length] = solved[row][i][0];\r\n            }\r\n        }\r\n        return content;\r\n    }\r\n\r\n    function colContent(col) {\r\n        let content = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (unknown !== solved[i][col][1]) {\r\n                content[content.length] = solved[i][col][0];\r\n            }\r\n        }\r\n        return content;\r\n    }\r\n\r\n    function blockContent(row, col) {\r\n        let content = [];\r\n        let offset = blockOffset(row, col);\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let k = 0; k < 3; k++) {\r\n                if (unknown !== solved[offset.row+i][offset.col+k][1]) {\r\n                    content[content.length] = solved[offset.row+i][offset.col+k][0];\r\n                }\r\n            }\r\n        }\r\n        return content;\r\n    }\r\n\r\n    function blockOffset(row, col) {\r\n        return {\r\n            col: Math.floor(col/3) * 3,\r\n            row: Math.floor(row/3) * 3,\r\n        }\r\n    }\r\n\r\n    function lessRowSuggest(row, col) {\r\n        let lessSuggest = solved[row][col][2];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (i === col || unknown !== solved[row][i][1]) {\r\n                continue;\r\n            }\r\n            lessSuggest = arrayDiff(lessSuggest, solved[row][i][2]);\r\n        }\r\n        return lessSuggest;\r\n    }\r\n\r\n    function lessColSuggest(row, col) {\r\n        let lessSuggest = solved[row][col][2];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (i === row || unknown !== solved[i][col][1]) {\r\n                continue;\r\n            }\r\n            lessSuggest = arrayDiff(lessSuggest, solved[i][col][2]);\r\n        }\r\n        return lessSuggest;\r\n    }\r\n\r\n    function lessBlockSuggest(row, col) {\r\n        let lessSuggest = solved[row][col][2];\r\n        let offset = blockOffset(row, col);\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let k = 0; k < 3; k++) {\r\n                if (((offset.row+i) === row && (offset.col+k) === col) || unknown !== solved[offset.row+i][offset.col+k][1]) {\r\n                    continue;\r\n                }\r\n                lessSuggest = arrayDiff(lessSuggest, solved[offset.row+i][offset.col+k][2]);\r\n            }\r\n        }\r\n        return lessSuggest;\r\n    }\r\n\r\n    function isSolved() {\r\n        let isSolved = true;\r\n        for (let row = 0; row < 9; row++) {\r\n            for (let col = 0; col < 9; col++) {\r\n                if (unknown === solved[row][col][1]) {\r\n                    isSolved = false;\r\n                }\r\n            }\r\n        }\r\n        return isSolved;\r\n    }\r\n\r\n    function isFailed() {\r\n        let isFailed = false;\r\n        for (let row = 0; row < 9; row++) {\r\n            for (let col = 0; col < 9; col++) {\r\n                if (unknown === solved[row][col][1] && !solved[row][col][2].length) {\r\n                    isFailed = true;\r\n                }\r\n            }\r\n        }\r\n        return isFailed;\r\n    }\r\n\r\n    function backtracking() {\r\n        let inValue = [[], [], [], [], [], [], [], [], []];\r\n        let minRow = -1, minCol = -1, suggestContent = 0;\r\n\r\n        for (let row = 0; row < 9; row++) {\r\n            inValue[row].length = 9;\r\n            for (let col = 0; col < 9; col++) {\r\n                inValue[row][col] = solved[row][col][0];\r\n                if (unknown === solved[row][col][1] && (solved[row][col][2].length < suggestContent || !suggestContent)) {\r\n                    suggestContent = solved[row][col][2].length;\r\n                    minRow = row;\r\n                    minCol = col;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < suggestContent; i++) {\r\n            inValue[minRow][minCol] = solved[minRow][minCol][2][i];\r\n            const sudoku = new Solved(inValue);\r\n            if (sudoku.isSolved()) {\r\n                let outValue = sudoku.solved();\r\n\r\n                for (let row = 0; row < 9; row++) {\r\n                    for (let col = 0; col < 9; col++) {\r\n                        if (unknown === solved[row][col][1]) {\r\n                            markSolved(row, col, outValue[row][col][0])\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    return solved;\r\n};","<template>\r\n    <main class=\"main\">\r\n        <table class=\"board\">\r\n            <tbody class=\"board__body\">\r\n            <tr v-for=\"(row, rowIndex) in sudoku\"\r\n                class=\"row row__border\"\r\n                :class=\"(rowIndex % 3 === 2 && rowIndex !== 8) ? 'row__border--bottom' : ''\"\r\n                :key=\"rowIndex\">\r\n                <td v-for=\"(col, colIndex) in row\"\r\n                    class=\"column column__border\"\r\n                    :class=\"[\r\n                        (colIndex % 3 === 2 && colIndex !== 8) ? 'column__border--right' : '',\r\n                        col.invalid ? 'invalid' : 'valid'\r\n                    ]\"\r\n                    :key=\"colIndex\">\r\n                    <input type=\"tel\"\r\n                           :data-row=\"rowIndex\"\r\n                           :data-column=\"colIndex\"\r\n                           :value=\"col.value\"\r\n                           :readonly=\"!col.disabled\"\r\n                            @click=\"columnTarget\"\r\n                            @keyup=\"columnEnter\">\r\n                </td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n        <br>\r\n        <b-row align-h=\"between\">\r\n            <b-col>\r\n                <b-button variant=\"outline-primary\" @click=\"buildBoard\">Build New Board</b-button>\r\n            </b-col>\r\n            <b-col>\r\n                <b-button variant=\"success\" @click=\"solve\">Solved</b-button>\r\n            </b-col>\r\n        </b-row>\r\n    </main>\r\n</template>\r\n\r\n<script>\r\n    import { generatedNumbers, getRandomBoard } from './../utils/boards';\r\n    import { getChunks } from './../utils/helpers';\r\n    import { Solved } from \"../utils/solved\";\r\n\r\n    export default {\r\n        name: \"Sudoku\",\r\n        data() {\r\n            return {\r\n                sudoku: null,\r\n                gameLength: 9,\r\n                numberSquares: 81,\r\n            }\r\n        },\r\n        mounted() {\r\n            this.buildBoard();\r\n        },\r\n        methods: {\r\n            buildBoard() {\r\n                let sudoku = [];\r\n                const board = getRandomBoard(generatedNumbers);\r\n                for (let i = 0; i < this.numberSquares; i++) {\r\n                    sudoku.push((board[i] === '0') ? null : parseInt(board[i]))\r\n                }\r\n                sudoku = getChunks(sudoku, this.gameLength);\r\n                for (let row = 0; row < 9; row++) {\r\n                    for (let column = 0; column < 9; column++) {\r\n                        const value = sudoku[row][column];\r\n                        sudoku[row][column] = {\r\n                            row,\r\n                            column,\r\n                            value,\r\n                            disabled: value === null,\r\n                            invalid: false\r\n                        }\r\n                    }\r\n                }\r\n                this.sudoku = sudoku;\r\n            },\r\n            validate() {\r\n                const allValid = () => {\r\n                    for (let row = 0; row < 9; row++) {\r\n                        for (let column = 0; column < 9; column++) {\r\n                            this.sudoku[row][column].invalid = false;\r\n                        }\r\n                    }\r\n                };\r\n                const invalid = array => {\r\n                    let numbers = {};\r\n                    for (let i = 0; i < 9; i++) {\r\n                        if (array[i].value !== null && numbers.hasOwnProperty(array[i].value)) {\r\n                            array[i].invalid = true;\r\n                            array[numbers[array[i].value]].invalid = true;\r\n                        }\r\n                        numbers[array[i].value] = i;\r\n                    }\r\n                };\r\n                const validator = () => {\r\n                    allValid();\r\n\r\n                    for (let row = 0; row < 9; row++) {\r\n                        let array = [];\r\n                        for (let column = 0; column < 9; column++) {\r\n                            array.push(this.sudoku[row][column]);\r\n                        }\r\n                        invalid(array);\r\n                    }\r\n\r\n                    for (let column = 0; column < 9; column++) {\r\n                        let array = [];\r\n                        for (let row = 0; row < 9; row++) {\r\n                            array.push(this.sudoku[row][column]);\r\n                        }\r\n                        invalid(array);\r\n                    }\r\n                    const sudoku = this.sudoku;\r\n                    invalid([sudoku[0][0], sudoku[0][1], sudoku[0][2], sudoku[1][0], sudoku[1][1], sudoku[1][2], sudoku[2][0], sudoku[2][1], sudoku[2][2]]);\r\n                    invalid([sudoku[3][0], sudoku[3][1], sudoku[3][2], sudoku[4][0], sudoku[4][1], sudoku[4][2], sudoku[5][0], sudoku[5][1], sudoku[5][2]]);\r\n                    invalid([sudoku[6][0], sudoku[6][1], sudoku[6][2], sudoku[7][0], sudoku[7][1], sudoku[7][2], sudoku[8][0], sudoku[8][1], sudoku[8][2]]);\r\n                    invalid([sudoku[0][3], sudoku[0][4], sudoku[0][5], sudoku[1][3], sudoku[1][4], sudoku[1][5], sudoku[2][3], sudoku[2][4], sudoku[2][5]]);\r\n                    invalid([sudoku[3][3], sudoku[3][4], sudoku[3][5], sudoku[4][3], sudoku[4][4], sudoku[4][5], sudoku[5][3], sudoku[5][4], sudoku[5][5]]);\r\n                    invalid([sudoku[6][3], sudoku[6][4], sudoku[6][5], sudoku[7][3], sudoku[7][4], sudoku[7][5], sudoku[8][3], sudoku[8][4], sudoku[8][5]]);\r\n                    invalid([sudoku[0][6], sudoku[0][7], sudoku[0][8], sudoku[1][6], sudoku[1][7], sudoku[1][8], sudoku[2][6], sudoku[2][7], sudoku[2][8]]);\r\n                    invalid([sudoku[3][6], sudoku[3][7], sudoku[3][8], sudoku[4][6], sudoku[4][7], sudoku[4][8], sudoku[5][6], sudoku[5][7], sudoku[5][8]]);\r\n                    invalid([sudoku[6][6], sudoku[6][7], sudoku[6][8], sudoku[7][6], sudoku[7][7], sudoku[7][8], sudoku[8][6], sudoku[8][7], sudoku[8][8]]);\r\n                };\r\n\r\n                return validator();\r\n            },\r\n            columnTarget(event) {\r\n                event.target.readOnly ? event.target.blur() : event.target.select();\r\n            },\r\n            columnEnter(event) {\r\n                const element = event.target;\r\n                let value = element.value;\r\n                if (value.length > 1) {\r\n                    element.value = value[0];\r\n                    value = element.value;\r\n                }\r\n                if (!/^[1-9]$/.test(value)) {\r\n                    event.target.value = '';\r\n                }\r\n\r\n                const row = parseInt(element.dataset.row);\r\n                const column = parseInt(element.dataset.column);\r\n                this.sudoku[row][column].value = element.value.length > 0 ? parseInt(value) : null;\r\n\r\n                this.validate();\r\n\r\n                if (value.length > 0) {\r\n                    event.target.blur();\r\n                }\r\n            },\r\n            solve() {\r\n                let solved;\r\n                try {\r\n                    solved = Solved(this.sudoku.map(row => row.map(column => column.value ? column.value : 0)));\r\n                } catch (e) {\r\n                    alert(`Error solved! Please, build new board.`);\r\n                }\r\n\r\n                if (solved.length !== 9) {\r\n                    throw 'Invalid sudoku. Try again';\r\n                }\r\n\r\n                for (let row in solved) {\r\n                    let columns = solved[row];\r\n                    for (let column in columns) {\r\n                        this.sudoku.map((r, index) => {\r\n                            if (+row === +index) {\r\n                                r.map((c, index) => {\r\n                                    if (+column === +index) {\r\n                                        c.value = columns[column][0];\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .main {\r\n        width: 450px;\r\n        margin: 0 auto;\r\n    }\r\n    .board {\r\n        width: auto;\r\n        &__body {\r\n        }\r\n        .row {\r\n            &__border {\r\n                &--bottom {\r\n                    border-bottom: 2px solid black;\r\n                }\r\n            }\r\n        }\r\n        .column {\r\n            &__border {\r\n                &--right {\r\n                    border-right: 2px solid black;\r\n                }\r\n            }\r\n            &.invalid {\r\n                input {\r\n                    color: red\r\n                }\r\n                input:read-only {\r\n                    font-weight: 700;\r\n                    border: 2px solid red;\r\n                }\r\n            }\r\n        }\r\n        input {\r\n            display: block;\r\n            margin: 0 auto;\r\n            width: 50px;\r\n            height: 50px;\r\n            text-align: center;\r\n            border: none;\r\n            background: gainsboro;\r\n            padding: 0;\r\n            &:read-only {\r\n                font-weight: 700;\r\n            }\r\n        }\r\n    }\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sudoku.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sudoku.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Sudoku.vue?vue&type=template&id=ba3d5322&scoped=true&\"\nimport script from \"./Sudoku.vue?vue&type=script&lang=js&\"\nexport * from \"./Sudoku.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Sudoku.vue?vue&type=style&index=0&id=ba3d5322&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ba3d5322\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div id=\"app\">\n    <div class=\"container\">\n      <img alt=\"img algo\" width=\"200\" src=\"https://vuejs.org/images/logo.png\">\n      <h1>Sudoku.js Vue</h1>\n      <sudoku></sudoku>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Sudoku from './components/Sudoku'\n\nexport default {\n  name: 'app',\n  components: {\n    Sudoku\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=d35646aa&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport BootstrapVue from 'bootstrap-vue'\nimport App from './App.vue'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap-vue/dist/bootstrap-vue.css'\n\nVue.config.productionTip = false;\n\nVue.use(BootstrapVue);\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app');\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sudoku.vue?vue&type=style&index=0&id=ba3d5322&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sudoku.vue?vue&type=style&index=0&id=ba3d5322&lang=scss&scoped=true&\""],"sourceRoot":""}